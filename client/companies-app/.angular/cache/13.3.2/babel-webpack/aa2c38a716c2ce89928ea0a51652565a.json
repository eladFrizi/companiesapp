{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\eladfr\\\\dev\\\\companies-dashboard\\\\client\\\\companies-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { BehaviorSubject, firstValueFrom, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CompaniesService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.cache = new Map();\n    this.selectedCompaniesDomains$ = new BehaviorSubject([]);\n    this.selectedCompanies$ = this.selectedCompaniesDomains$.pipe(map(companyModels => companyModels.map(model => {\n      return {\n        data: this.cache.get(model.domain),\n        isLiked: model.isLiked\n      };\n    })));\n  }\n\n  addSelectedCompany(domain) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.cache.has(domain)) {\n        return 'exists';\n      }\n\n      const res = yield _this.fetchCompanyData(domain);\n\n      if (res.success) {\n        _this.saveCompany(domain, res);\n\n        return 'added';\n      } else {\n        return 'failed';\n      }\n    })();\n  }\n\n  getCompany(domain) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2.cache.get(domain) || _this2.fetchCompanyData(domain);\n    })();\n  }\n\n  saveCompany(domain, res) {\n    this.cache.set(domain, res.data);\n    this.selectedCompaniesDomains$.next([...this.selectedCompaniesDomains$.value, {\n      domain,\n      isLiked: false\n    }]);\n  }\n\n  fetchCompanyData(domain) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield firstValueFrom(_this3.httpClient.get(`http://localhost:3000/company?domain=${domain}`));\n    })();\n  }\n\n}\n\nCompaniesService.ɵfac = function CompaniesService_Factory(t) {\n  return new (t || CompaniesService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nCompaniesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CompaniesService,\n  factory: CompaniesService.ɵfac,\n  providedIn: 'root'\n});\nexport var ErrorTypes;\n\n(function (ErrorTypes) {\n  ErrorTypes[\"NotFound\"] = \"notFound\";\n})(ErrorTypes || (ErrorTypes = {}));","map":{"version":3,"sources":["C:/Users/eladfr/dev/companies-dashboard/client/companies-app/src/app/companies.service.ts"],"names":["BehaviorSubject","firstValueFrom","map","i0","i1","CompaniesService","constructor","httpClient","cache","Map","selectedCompaniesDomains$","selectedCompanies$","pipe","companyModels","model","data","get","domain","isLiked","addSelectedCompany","has","res","fetchCompanyData","success","saveCompany","getCompany","set","next","value","ɵfac","CompaniesService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ErrorTypes"],"mappings":";AAAA,SAASA,eAAT,EAA0BC,cAA1B,EAA0CC,GAA1C,QAAqD,MAArD;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,SAAKC,yBAAL,GAAiC,IAAIV,eAAJ,CAAoB,EAApB,CAAjC;AACA,SAAKW,kBAAL,GAA0B,KAAKD,yBAAL,CAA+BE,IAA/B,CAAoCV,GAAG,CAACW,aAAa,IAAIA,aAAa,CAACX,GAAd,CAAmBY,KAAD,IAAW;AAC5G,aAAO;AACHC,QAAAA,IAAI,EAAE,KAAKP,KAAL,CAAWQ,GAAX,CAAeF,KAAK,CAACG,MAArB,CADH;AAEHC,QAAAA,OAAO,EAAEJ,KAAK,CAACI;AAFZ,OAAP;AAIH,KALkF,CAAlB,CAAvC,CAA1B;AAMH;;AACKC,EAAAA,kBAAkB,CAACF,MAAD,EAAS;AAAA;;AAAA;AAC7B,UAAI,KAAI,CAACT,KAAL,CAAWY,GAAX,CAAeH,MAAf,CAAJ,EAA4B;AACxB,eAAO,QAAP;AACH;;AACD,YAAMI,GAAG,SAAS,KAAI,CAACC,gBAAL,CAAsBL,MAAtB,CAAlB;;AACA,UAAII,GAAG,CAACE,OAAR,EAAiB;AACb,QAAA,KAAI,CAACC,WAAL,CAAiBP,MAAjB,EAAyBI,GAAzB;;AACA,eAAO,OAAP;AACH,OAHD,MAIK;AACD,eAAO,QAAP;AACH;AAX4B;AAYhC;;AAEKI,EAAAA,UAAU,CAACR,MAAD,EAAS;AAAA;;AAAA;AACrB,aAAO,MAAI,CAACT,KAAL,CAAWQ,GAAX,CAAeC,MAAf,KAA0B,MAAI,CAACK,gBAAL,CAAsBL,MAAtB,CAAjC;AADqB;AAExB;;AACDO,EAAAA,WAAW,CAACP,MAAD,EAASI,GAAT,EAAc;AACrB,SAAKb,KAAL,CAAWkB,GAAX,CAAeT,MAAf,EAAuBI,GAAG,CAACN,IAA3B;AACA,SAAKL,yBAAL,CAA+BiB,IAA/B,CAAoC,CAAC,GAAG,KAAKjB,yBAAL,CAA+BkB,KAAnC,EAA0C;AACtEX,MAAAA,MADsE;AAEtEC,MAAAA,OAAO,EAAE;AAF6D,KAA1C,CAApC;AAIH;;AACKI,EAAAA,gBAAgB,CAACL,MAAD,EAAS;AAAA;;AAAA;AAC3B,mBAAahB,cAAc,CAAC,MAAI,CAACM,UAAL,CAAgBS,GAAhB,CAAqB,wCAAuCC,MAAO,EAAnE,CAAD,CAA3B;AAD2B;AAE9B;;AAtCyB;;AAwC9BZ,gBAAgB,CAACwB,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAI1B,gBAAV,EAA4BF,EAAE,CAAC6B,QAAH,CAAY5B,EAAE,CAAC6B,UAAf,CAA5B,CAAP;AAAiE,CAAhI;;AACA5B,gBAAgB,CAAC6B,KAAjB,GAAyB,aAAc/B,EAAE,CAACgC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE/B,gBAAT;AAA2BgC,EAAAA,OAAO,EAAEhC,gBAAgB,CAACwB,IAArD;AAA2DS,EAAAA,UAAU,EAAE;AAAvE,CAAtB,CAAvC;AACA,OAAO,IAAIC,UAAJ;;AACP,CAAC,UAAUA,UAAV,EAAsB;AACnBA,EAAAA,UAAU,CAAC,UAAD,CAAV,GAAyB,UAAzB;AACH,CAFD,EAEGA,UAAU,KAAKA,UAAU,GAAG,EAAlB,CAFb","sourcesContent":["import { BehaviorSubject, firstValueFrom, map } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class CompaniesService {\r\n    constructor(httpClient) {\r\n        this.httpClient = httpClient;\r\n        this.cache = new Map();\r\n        this.selectedCompaniesDomains$ = new BehaviorSubject([]);\r\n        this.selectedCompanies$ = this.selectedCompaniesDomains$.pipe(map(companyModels => companyModels.map((model) => {\r\n            return {\r\n                data: this.cache.get(model.domain),\r\n                isLiked: model.isLiked\r\n            };\r\n        })));\r\n    }\r\n    async addSelectedCompany(domain) {\r\n        if (this.cache.has(domain)) {\r\n            return 'exists';\r\n        }\r\n        const res = await this.fetchCompanyData(domain);\r\n        if (res.success) {\r\n            this.saveCompany(domain, res);\r\n            return 'added';\r\n        }\r\n        else {\r\n            return 'failed';\r\n        }\r\n    }\r\n    ;\r\n    async getCompany(domain) {\r\n        return this.cache.get(domain) || this.fetchCompanyData(domain);\r\n    }\r\n    saveCompany(domain, res) {\r\n        this.cache.set(domain, res.data);\r\n        this.selectedCompaniesDomains$.next([...this.selectedCompaniesDomains$.value, {\r\n                domain,\r\n                isLiked: false\r\n            }]);\r\n    }\r\n    async fetchCompanyData(domain) {\r\n        return await firstValueFrom(this.httpClient.get(`http://localhost:3000/company?domain=${domain}`));\r\n    }\r\n}\r\nCompaniesService.ɵfac = function CompaniesService_Factory(t) { return new (t || CompaniesService)(i0.ɵɵinject(i1.HttpClient)); };\r\nCompaniesService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CompaniesService, factory: CompaniesService.ɵfac, providedIn: 'root' });\r\nexport var ErrorTypes;\r\n(function (ErrorTypes) {\r\n    ErrorTypes[\"NotFound\"] = \"notFound\";\r\n})(ErrorTypes || (ErrorTypes = {}));\r\n"]},"metadata":{},"sourceType":"module"}