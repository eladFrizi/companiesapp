{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\eladfr\\\\dev\\\\companies-dashboard\\\\client\\\\companies-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { BehaviorSubject, firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CompaniesService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.cache = new Map();\n    this.selectedCompanies$ = new BehaviorSubject([]);\n  }\n\n  addSelectedCompany(domain) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.cache.has(domain)) {\n        return _this.cache.get(domain);\n      }\n\n      const res = yield _this.fetchCompanyData();\n\n      _this.selectedCompanies$.next([..._this.selectedCompanies$.value, domain]);\n    })();\n  }\n\n  getCompany(domain) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2.cache.get(domain);\n    })();\n  }\n\n  fetchCompanyData() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield firstValueFrom(_this3.httpClient.get(\"http://localhost:3000/company?domain=google.com\"));\n    })();\n  }\n\n}\n\nCompaniesService.ɵfac = function CompaniesService_Factory(t) {\n  return new (t || CompaniesService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nCompaniesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CompaniesService,\n  factory: CompaniesService.ɵfac,\n  providedIn: 'root'\n});\nexport var ErrorTypes;\n\n(function (ErrorTypes) {\n  ErrorTypes[\"NotFound\"] = \"notFound\";\n})(ErrorTypes || (ErrorTypes = {}));","map":{"version":3,"sources":["C:/Users/eladfr/dev/companies-dashboard/client/companies-app/src/app/companies.service.ts"],"names":["BehaviorSubject","firstValueFrom","i0","i1","CompaniesService","constructor","httpClient","cache","Map","selectedCompanies$","addSelectedCompany","domain","has","get","res","fetchCompanyData","next","value","getCompany","ɵfac","CompaniesService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ErrorTypes"],"mappings":";AAAA,SAASA,eAAT,EAA0BC,cAA1B,QAAgD,MAAhD;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,SAAKC,kBAAL,GAA0B,IAAIT,eAAJ,CAAoB,EAApB,CAA1B;AACH;;AACKU,EAAAA,kBAAkB,CAACC,MAAD,EAAS;AAAA;;AAAA;AAC7B,UAAI,KAAI,CAACJ,KAAL,CAAWK,GAAX,CAAeD,MAAf,CAAJ,EAA4B;AACxB,eAAO,KAAI,CAACJ,KAAL,CAAWM,GAAX,CAAeF,MAAf,CAAP;AACH;;AACD,YAAMG,GAAG,SAAS,KAAI,CAACC,gBAAL,EAAlB;;AACA,MAAA,KAAI,CAACN,kBAAL,CAAwBO,IAAxB,CAA6B,CAAC,GAAG,KAAI,CAACP,kBAAL,CAAwBQ,KAA5B,EAAmCN,MAAnC,CAA7B;AAL6B;AAMhC;;AACKO,EAAAA,UAAU,CAACP,MAAD,EAAS;AAAA;;AAAA;AACrB,aAAO,MAAI,CAACJ,KAAL,CAAWM,GAAX,CAAeF,MAAf,CAAP;AADqB;AAExB;;AACKI,EAAAA,gBAAgB,GAAG;AAAA;;AAAA;AACrB,mBAAad,cAAc,CAAC,MAAI,CAACK,UAAL,CAAgBO,GAAhB,CAAoB,iDAApB,CAAD,CAA3B;AADqB;AAExB;;AAlByB;;AAoB9BT,gBAAgB,CAACe,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAIjB,gBAAV,EAA4BF,EAAE,CAACoB,QAAH,CAAYnB,EAAE,CAACoB,UAAf,CAA5B,CAAP;AAAiE,CAAhI;;AACAnB,gBAAgB,CAACoB,KAAjB,GAAyB,aAActB,EAAE,CAACuB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEtB,gBAAT;AAA2BuB,EAAAA,OAAO,EAAEvB,gBAAgB,CAACe,IAArD;AAA2DS,EAAAA,UAAU,EAAE;AAAvE,CAAtB,CAAvC;AACA,OAAO,IAAIC,UAAJ;;AACP,CAAC,UAAUA,UAAV,EAAsB;AACnBA,EAAAA,UAAU,CAAC,UAAD,CAAV,GAAyB,UAAzB;AACH,CAFD,EAEGA,UAAU,KAAKA,UAAU,GAAG,EAAlB,CAFb","sourcesContent":["import { BehaviorSubject, firstValueFrom } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class CompaniesService {\r\n    constructor(httpClient) {\r\n        this.httpClient = httpClient;\r\n        this.cache = new Map();\r\n        this.selectedCompanies$ = new BehaviorSubject([]);\r\n    }\r\n    async addSelectedCompany(domain) {\r\n        if (this.cache.has(domain)) {\r\n            return this.cache.get(domain);\r\n        }\r\n        const res = await this.fetchCompanyData();\r\n        this.selectedCompanies$.next([...this.selectedCompanies$.value, domain]);\r\n    }\r\n    async getCompany(domain) {\r\n        return this.cache.get(domain);\r\n    }\r\n    async fetchCompanyData() {\r\n        return await firstValueFrom(this.httpClient.get(\"http://localhost:3000/company?domain=google.com\"));\r\n    }\r\n}\r\nCompaniesService.ɵfac = function CompaniesService_Factory(t) { return new (t || CompaniesService)(i0.ɵɵinject(i1.HttpClient)); };\r\nCompaniesService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CompaniesService, factory: CompaniesService.ɵfac, providedIn: 'root' });\r\nexport var ErrorTypes;\r\n(function (ErrorTypes) {\r\n    ErrorTypes[\"NotFound\"] = \"notFound\";\r\n})(ErrorTypes || (ErrorTypes = {}));\r\n"]},"metadata":{},"sourceType":"module"}